// Cloudflare Worker for translating SRT files to multiple languages

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);
  const path = url.pathname;

  if (path === '/' || path === '') {
    return new Response(generateHTML(), {
      headers: { 'Content-Type': 'text/html;charset=UTF-8' },
    });
  }

  if (path === '/translate-chunk' && request.method === 'POST') {
    try {
      const formData = await request.formData();
      const chunkText = formData.get('chunkText');
      const apiKey = formData.get('apiKey');
      const model = formData.get('model');
      const temperature = parseFloat(formData.get('temperature'));
      const sourceLanguage = formData.get('sourceLanguage');
      const targetLanguage = formData.get('targetLanguage');

      if (!chunkText || !apiKey || !sourceLanguage || !targetLanguage) {
        return new Response(JSON.stringify({ error: 'Missing required parameters' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' },
        });
      }

      const translatedChunk = await translateText(chunkText, apiKey, model, temperature, sourceLanguage, targetLanguage);
      return new Response(JSON.stringify({ translated: translatedChunk }), {
        headers: { 'Content-Type': 'application/json' },
      });
    } catch (error) {
      console.error(`Error in translate-chunk: ${error.message}`);
      return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      });
    }
  }

  return new Response('Not Found', { status: 404 });
}

async function translateText(text, apiKey, model, temperature, sourceLanguage, targetLanguage) {
  const MAX_RETRIES = 3;
  const BACKOFF_FACTOR = 2;

  for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {
    try {
      const prompt = `You are a professional movies and series subtitle translator. 
The text below is in SRT format (with subtitle numbering, timing, and dialogue lines in ${sourceLanguage}). 
Translate the dialogue text into very native, clear, and natural ${targetLanguage}. 
Do not alter or modify any subtitle numbering or timing information. 
Your output must have exactly the same SRT format as the input, with only the dialogue translated.

Here is the original SRT content:\n\n${text}`;

      const generateContentRequest = {
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: {
          temperature,
          topP: 0.95,
          topK: 40,
          maxOutputTokens: 16384,
        }
      };

      const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/${model}:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(generateContentRequest)
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (response.status === 429) {
          const waitTime = BACKOFF_FACTOR * (attempt + 1) * 1000;
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }
        throw new Error(`API Error: ${errorData.error?.message || JSON.stringify(errorData)}`);
      }

      const data = await response.json();
      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content || !data.candidates[0].content.parts) {
        throw new Error("Invalid API response format");
      }

      return data.candidates[0].content.parts[0].text;

    } catch (error) {
      console.error(`Translation attempt ${attempt + 1} failed: ${error.message}`);
      if (attempt === MAX_RETRIES - 1) throw error;
      const waitTime = BACKOFF_FACTOR * (attempt + 1) * 1000;
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }

  throw new Error("Max retries exceeded for translation.");
}

function generateHTML() {
  return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SRT Translator</title>
  <style>
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.03); }
      100% { transform: scale(1); }
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    body {
      font-family: 'Roboto', sans-serif;
      max-width: 1000px;
      margin: 0 auto;
      padding: 40px 20px;
      background: #191970; /* Midnight blue background */
      color: #e6e6fa; /* Lavender for text visibility */
      min-height: 100vh;
      line-height: 1.6;
    }
    .container {
      background: rgba(255, 255, 255, 0.95); /* Slightly transparent white */
      border-radius: 15px;
      padding: 40px;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
      animation: fadeIn 0.5s ease-out;
    }
    h1 {
      color: #ff69b4; /* Hot pink for contrast */
      text-align: center;
      font-size: 2.4em;
      margin-bottom: 35px;
      font-weight: 700;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      letter-spacing: 1px;
    }
    .form-group {
      margin-bottom: 25px;
    }
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #87ceeb; /* Sky blue for labels */
    }
    input[type="text"], input[type="number"], select {
      width: 100%;
      padding: 12px 15px;
      border: 2px solid #4682b4; /* Steel blue */
      border-radius: 8px;
      background: #f0f8ff; /* Alice blue */
      color: #191970; /* Midnight blue text */
      font-size: 1em;
      transition: border-color 0.3s, box-shadow 0.3s;
    }
    input[type="text"]:focus, input[type="number"]:focus, select:focus {
      border-color: #00ced1; /* Dark turquoise */
      box-shadow: 0 0 8px rgba(0, 206, 209, 0.5);
      outline: none;
    }
    input[type="file"] {
      width: 100%;
      padding: 12px;
      border: 2px dashed #4682b4;
      border-radius: 8px;
      background: #f0f8ff;
      color: #191970;
    }
    .button-group {
      display: flex;
      gap: 30px;
      justify-content: center;
      margin-top: 30px;
    }
    button {
      background: linear-gradient(45deg, #32cd32, #98fb98); /* Lime green to pale green */
      color: #191970; /* Midnight blue text */
      border: none;
      padding: 12px 25px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1.1em;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1px;
      transition: all 0.3s;
      animation: pulse 2s infinite;
    }
    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(50, 205, 50, 0.4);
    }
    button:disabled {
      background: #778899; /* Light slate gray */
      color: #e6e6fa;
      cursor: not-allowed;
      animation: none;
      box-shadow: none;
    }
    .stop-btn {
      background: linear-gradient(45deg, #ff1493, #ffb6c1); /* Deep pink to light pink */
      display: none;
    }
    .download-btn {
      background: linear-gradient(45deg, #ffd700, #fffacd); /* Gold to lemon chiffon */
      display: none;
    }
    .status {
      margin-top: 25px;
      padding: 15px;
      border-radius: 8px;
      font-size: 1.1em;
      text-align: center;
      animation: fadeIn 0.5s;
    }
    .error {
      background: rgba(255, 182, 193, 0.9); /* Light pink */
      color: #ff1493; /* Deep pink */
      border: 1px solid #ff69b4;
    }
    .success {
      background: rgba(152, 251, 152, 0.9); /* Pale green */
      color: #32cd32; /* Lime green */
      border: 1px solid #98fb98;
    }
    .progress-container {
      display: none;
      margin-top: 30px;
      padding: 20px;
      background: rgba(70, 130, 180, 0.2); /* Steel blue with transparency */
      border-radius: 10px;
      box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.2);
    }
    progress {
      width: 100%;
      height: 20px;
      border-radius: 10px;
      border: none;
      background: #4682b4;
    }
    progress::-webkit-progress-bar {
      background: #4682b4;
      border-radius: 10px;
    }
    progress::-webkit-progress-value {
      background: linear-gradient(45deg, #32cd32, #98fb98);
      border-radius: 10px;
    }
    .progress-log {
      margin-top: 15px;
      max-height: 150px;
      overflow-y: auto;
      font-size: 0.95em;
      color: #e6e6fa;
      background: rgba(255, 255, 255, 0.95);
      padding: 10px;
      border-radius: 8px;
      border: 1px solid #4682b4;
    }
    .info {
      background: rgba(135, 206, 235, 0.9); /* Sky blue */
      color: #191970;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 30px;
      font-size: 1.1em;
      border-left: 5px solid #00ced1;
      text-align: center;
      font-weight: 500;
    }
    .info a {
      color: #ff69b4;
      text-decoration: none;
      font-weight: 700;
    }
    .info a:hover {
      text-decoration: underline;
    }
    .info .highlight {
      background: rgba(255, 250, 205, 0.9); /* Lemon chiffon */
      padding: 10px;
      border-radius: 5px;
      display: inline-block;
      margin-top: 10px;
    }
    .subtitle-preview {
      max-height: 250px;
      overflow-y: auto;
      border: 2px solid #4682b4;
      border-radius: 10px;
      padding: 15px;
      margin-top: 25px;
      background: #f0f8ff;
      color: #191970;
      font-family: 'Courier New', monospace;
      font-size: 0.95em;
      white-space: pre-wrap;
      display: none;
    }
    small {
      color: #b0c4de; /* Light steel blue */
      font-size: 0.9em;
    }
    .footer {
      margin-top: 40px;
      text-align: center;
      font-size: 0.9em;
      color: #87ceeb;
    }
    .footer a {
      color: #a30ee3;
      text-decoration: none;
      font-weight: 600;
    }
    .footer a:hover {
      text-decoration: underline;
    }
    .footer .caution {
      color: #ff69b4;
      font-weight: 500;
      margin-top: 10px;
    }
    .footer .love {
      color: #ffd700;
      font-size: 1.2em;
    }
  </style>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <div class="container">
    <h1>SRT Translator</h1>
    
    <div class="info">
      Easily translate your subtitles into any language with AI.<br>
      <span class="highlight">
        Important: To use this tool, you need a Google API key. 
        Visit <a href="https://aistudio.google.com/prompts/new_chat" target="_blank">AI Studio</a>, 
        sign in with your Google account, go to "API Keys" in the sidebar, and click "Generate API Key". 
        Copy the key and paste it into the field below.
      </span>
    </div>
    
    <div class="form-group">
      <label for="srtFile">Upload SRT File:</label>
      <input type="file" id="srtFile" accept=".srt">
    </div>
    
    <div class="subtitle-preview" id="subtitlePreview"></div>
    
    <div class="form-group">
      <label for="apiKey">Google API Key:</label>
      <input type="text" id="apiKey" placeholder="Enter your Google Gemini API key">
    </div>
    
    <div class="form-group">
      <label for="model">Model:</label>
      <select id="model">
        <option value="gemini-1.5-flash">gemini-1.5-flash</option>
        <option value="gemini-2.0-flash-lite">gemini-2.0-flash-lite</option>
        <option value="gemini-1.5-pro">gemini-1.5-pro</option>
        <option value="gemini-1.0-pro">gemini-1.0-pro</option>
      </select>
    </div>
    
    <div class="form-group">
      <label for="sourceLanguage">Source Language:</label>
      <select id="sourceLanguage">
        <option value="English" selected>English</option>
        <option value="Persian">Persian (Farsi)</option>
        <option value="Spanish">Spanish</option>
        <option value="French">French</option>
        <option value="Arabic">Arabic</option>
        <option value="Korean">Korean</option>
        <option value="German">German</option>
        <option value="Italian">Italian</option>
        <option value="Russian">Russian</option>
        <option value="Turkish">Turkish</option>
        <option value="Chinese (Simplified)">Chinese (Simplified)</option>
        <option value="Dutch">Dutch</option>
      </select>
    </div>
    
    <div class="form-group">
      <label for="targetLanguage">Target Language:</label>
      <select id="targetLanguage">
        <option value="Persian" selected>Persian (Farsi)</option>
        <option value="Spanish">Spanish</option>
        <option value="French">French</option>
        <option value="Arabic">Arabic</option>
        <option value="Korean">Korean</option>
        <option value="German">German</option>
        <option value="Italian">Italian</option>
        <option value="Russian">Russian</option>
        <option value="Turkish">Turkish</option>
        <option value="Chinese (Simplified)">Chinese (Simplified)</option>
        <option value="Dutch">Dutch</option>
        <option value="English">English</option>
      </select>
    </div>
    
    <div class="form-group">
      <label for="numChunks">Number of Chunks:</label>
      <input type="number" id="numChunks" value="16" min="1" max="20">
      <small>Higher number = smaller chunks, faster feedback</small>
    </div>
    
    <div class="form-group">
      <label for="temperature">Temperature:</label>
      <input type="number" id="temperature" value="0.2" min="0" max="2" step="0.1">
      <small>0 = precise, 2 = creative</small>
    </div>
    
    <div class="form-group">
      <label for="requestDelay">Delay Between Requests (ms):</label>
      <input type="number" id="requestDelay" value="1000" min="0" step="100">
      <small>Default is 1000ms (1 second) to avoid rate limits</small>
    </div>
    
    <div class="button-group">
      <button id="translateBtn">Start Translation</button>
      <button id="stopBtn" class="stop-btn">Stop</button>
      <button id="downloadBtn" class="download-btn">Download SRT</button>
    </div>
    
    <div class="progress-container" id="progressContainer">
      <progress id="progressBar" max="100" value="0"></progress>
      <div class="progress-log" id="progressLog"></div>
    </div>
    
    <div id="status" class="status" style="display: none;"></div>
    
    <div class="footer">
      Created by Rasoul Norouzi<br>
      <a href="https://github.com/rasoulnorouzi" target="_blank">GitHub</a> | 
      <a href="mailto:rasoulnorouzi@live.com">rasoulnorouzi@live.com</a> | 
      <a href="https://twitter.com/norouzi_rasoul" target="_blank">@norouzi_rasoul</a><br>
      <div class="caution">
        Note: This is a machine translator and may not be fully reliable. Use with caution.
      </div>
      <div class="love">Made with ❤️</div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const translateBtn = document.getElementById('translateBtn');
      const stopBtn = document.getElementById('stopBtn');
      const downloadBtn = document.getElementById('downloadBtn');
      const statusDiv = document.getElementById('status');
      const progressContainer = document.getElementById('progressContainer');
      const progressBar = document.getElementById('progressBar');
      const progressLog = document.getElementById('progressLog');
      const fileInput = document.getElementById('srtFile');
      const subtitlePreview = document.getElementById('subtitlePreview');
      
      let translatedContent = '';
      let abortController = null;
      
      fileInput.addEventListener('change', async (event) => {
        const file = event.target.files[0];
        if (file) {
          try {
            const text = await file.text();
            const lines = text.split('\\n').slice(0, 15);
            subtitlePreview.textContent = lines.join('\\n') + (lines.length < text.split('\\n').length ? '\\n...' : '');
            subtitlePreview.style.display = 'block';
          } catch (error) {
            subtitlePreview.textContent = 'Error previewing file.';
            subtitlePreview.style.display = 'block';
          }
        }
      });
      
      translateBtn.addEventListener('click', async () => {
        const srtFile = document.getElementById('srtFile').files[0];
        const apiKey = document.getElementById('apiKey').value.trim();
        const model = document.getElementById('model').value;
        const numChunks = parseInt(document.getElementById('numChunks').value);
        const temperature = parseFloat(document.getElementById('temperature').value);
        const sourceLanguage = document.getElementById('sourceLanguage').value;
        const targetLanguage = document.getElementById('targetLanguage').value;
        const requestDelay = parseInt(document.getElementById('requestDelay').value);
        
        if (!srtFile) {
          showStatus('Please upload an SRT file.', 'error');
          return;
        }
        if (!apiKey) {
          showStatus('Please enter your Google API key.', 'error');
          return;
        }
        
        translateBtn.disabled = true;
        stopBtn.style.display = 'inline-block';
        downloadBtn.style.display = 'none';
        showStatus('', '');
        progressContainer.style.display = 'block';
        progressBar.value = 0;
        progressLog.innerHTML = '';
        translatedContent = '';
        abortController = new AbortController();
        
        try {
          const srtContent = await srtFile.text();
          const normalizedContent = srtContent.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');
          const blocks = normalizedContent.trim().split(/\\n\\n+/).filter(block => block.trim() !== '');
          const totalBlocks = blocks.length;
          const chunkSize = Math.ceil(totalBlocks / numChunks);
          
          logProgress(\`Detected \${totalBlocks} blocks, splitting into \${numChunks} chunks (~\${chunkSize} blocks each)\`);
          
          const translatedBlocks = [];
          
          for (let i = 0; i < numChunks; i++) {
            if (abortController.signal.aborted) {
              throw new Error('Translation aborted by user');
            }
            
            const start = i * chunkSize;
            const end = Math.min((i + 1) * chunkSize, totalBlocks);
            if (start >= totalBlocks) break;
            
            const chunkBlocks = blocks.slice(start, end);
            const chunkText = chunkBlocks.join('\\n\\n');
            
            logProgress(\`Processing chunk \${i + 1} of \${numChunks} (blocks \${start + 1} to \${end})\`);
            
            const formData = new FormData();
            formData.append('chunkText', chunkText);
            formData.append('apiKey', apiKey);
            formData.append('model', model);
            formData.append('temperature', temperature);
            formData.append('sourceLanguage', sourceLanguage);
            formData.append('targetLanguage', targetLanguage);
            
            const response = await fetch('/translate-chunk', {
              method: 'POST',
              body: formData,
              signal: abortController.signal
            });
            
            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.error || 'Chunk translation failed');
            }
            
            const result = await response.json();
            const translatedChunk = result.translated;
            const translatedChunkBlocks = translatedChunk.trim().split(/\\n\\n+/).filter(block => block.trim() !== '');
            translatedBlocks.push(...translatedChunkBlocks);
            
            logProgress(\`Chunk \${i + 1} completed: \${translatedChunkBlocks.length} blocks translated\`);
            progressBar.value = Math.round(((i + 1) / numChunks) * 100);
            
            if (i < numChunks - 1) {
              logProgress(\`Waiting \${requestDelay}ms before next chunk...\`);
              await new Promise(resolve => setTimeout(resolve, requestDelay));
            }
          }
          
          logProgress('All chunks processed, finalizing file...');
          translatedContent = translatedBlocks.join('\\n\\n');
          
          if (translatedContent) {
            const translatedLines = translatedContent.split('\\n').slice(0, 15);
            subtitlePreview.textContent = "Translated preview:\\n" + 
                                        translatedLines.join('\\n') + 
                                        (translatedLines.length < translatedContent.split('\\n').length ? '\\n...' : '');
            subtitlePreview.style.display = 'block';
          }
          
          logProgress('File ready for download!');
          showStatus('Translation completed successfully!', 'success');
          downloadBtn.style.display = 'inline-block';
          
        } catch (error) {
          if (error.message === 'Translation aborted by user') {
            showStatus('Translation stopped.', 'error');
            logProgress('Process aborted by user.');
          } else {
            showStatus(\`Error: \${error.message}\`, 'error');
            logProgress(\`Error: \${error.message}\`);
          }
        } finally {
          translateBtn.disabled = false;
          stopBtn.style.display = 'none';
        }
      });
      
      stopBtn.addEventListener('click', () => {
        if (abortController) {
          abortController.abort();
        }
      });
      
      downloadBtn.addEventListener('click', () => {
        if (!translatedContent) return;
        
        const blob = new Blob([translatedContent], { type: 'text/plain;charset=UTF-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'translated_srt.srt';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });
      
      function logProgress(message) {
        const logEntry = document.createElement('div');
        logEntry.textContent = \`[\${new Date().toLocaleTimeString()}] \${message}\`;
        progressLog.appendChild(logEntry);
        progressLog.scrollTop = progressLog.scrollHeight;
      }
      
      function showStatus(message, type) {
        statusDiv.textContent = message;
        statusDiv.className = 'status ' + type;
        statusDiv.style.display = message ? 'block' : 'none';
      }
    });
  </script>
</body>
</html>
  `;
}
